;*1
-
*
/
+
<
<=
=
>
>=
addr
and
append
apply-primitive
assoc
assq
atom?
begin
boolean?
caar
cadr
car
cdar
cdr
cond
cons
define
eq?
equal?
eval
if
lambda
length
let
let*
letrec
list
list-ref
list-tail
list?
map
member
memq
mod
nlambda
not
null?
number?
or
pair?
procedure?
quote
read
set-car!
set-cdr!
set!
symbol?
write
;*2
#f
#t
nil
